// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  image             String?
  subscriptionTier  String         @default("free") // free, starter, pro, agency
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  accounts          Account[]
  sessions          Session[]
  threads           Thread[]
  subscription      Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id               String    @id @default(cuid())
  userId           String
  title            String?
  originalContent  String    @db.Text
  generatedThread  Json      // Array of tweet objects
  platform         String    // twitter, linkedin, both
  style            String    // professional, casual, storytelling, educational
  threadLength     Int       @default(10)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  scheduledAt      DateTime?
  publishedAt      DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics        ThreadAnalytics[]

  @@index([userId])
  @@index([createdAt])
}

model ThreadAnalytics {
  id          String   @id @default(cuid())
  threadId    String
  impressions Int      @default(0)
  engagements Int      @default(0)
  clicks      Int      @default(0)
  shares      Int      @default(0)
  date        DateTime @default(now())
  thread      Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([date])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeSubscriptionId String?   @unique
  stripeCustomerId     String?   @unique
  stripePriceId        String?
  status               String    // active, canceled, past_due, trialing
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
